import uploadFile from '../lib/uploadFile.js'
import uploadImage from '../lib/uploadImage.js'
import fetch from 'node-fetch'

let handler = async (m) => {
  let q = m.quoted ? m.quoted : m
  let mime = (q.msg || q).mimetype || ''
  if (!mime) return conn.reply(m.chat, `‚ö†Ô∏è ùöôùöòùöõ ùöèùöäùöüùöòùöõ, ùöõùöéùöúùöôùöòùöóùöçùöä ùöä ùöûùöóùöä *ùô∏ùöñùöäùöêùöéùöó* ùöò *ùöÖùöíÃÅùöçùöéùöò*`, m)

  await m.react(rwait)

  try {
    let media = await q.download()
    let isTele = /image\/(png|jpe?g|gif)|video\/mp4/.test(mime)
    let link = await (isTele ? uploadImage : uploadFile)(media)
    let img = await (await fetch(`${link}`)).buffer()

    let txt = `‚ï≠‚îÄ‚îÄ‚îÄ„Äî  ü…™…¥·¥ã - ·¥á…¥ ü·¥Ä·¥Ñ·¥á „Äï‚îÄ‚îÄ‚îÄ‚ïÆ\n\n`
        txt += `‚ú¶ ùô¥ùöóùöïùöäùöåùöé : ${link}\n`
        txt += `‚ú¶ ùô∞ùöåùöòùöõùöùùöäùöçùöò : ${await shortUrl(link)}\n`
        txt += `‚ú¶ ùöÉùöäùöñùöäùöóÃÉùöò : ${formatBytes(media.length)}\n`
        txt += `‚ú¶ ùô¥ùö°ùöôùöíùöõùöäùöåùöíùöòÃÅùöó : ${isTele ? 'ùôΩùöò ùöéùö°ùöôùöíùöõùöä' : 'ùô≥ùöéùöúùöåùöòùöóùöòùöåùöíùöçùöò'}\n\n`
        txt += `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶\n`
        txt += `>  ô è ${dev}`

    await conn.sendFile(m.chat, img, 'thumbnail.jpg', txt, m, fkontak)
    await m.react(done)

  } catch {
    await m.react(error)
  }
}

handler.help = ['tourl']
handler.tags = ['transformador']
handler.register = true
handler.command = ['tourl', 'upload']

export default handler

function formatBytes(bytes) {
  if (bytes === 0) return '0 B';
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']
  const i = Math.floor(Math.log(bytes) / Math.log(1024))
  return `${(bytes / 1024 ** i).toFixed(2)} ${sizes[i]}`;
}

async function shortUrl(url) {
  let res = await fetch(`https://tinyurl.com/api-create.php?url=${url}`)
  return await res.text()
}
